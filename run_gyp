#!/usr/bin/env python
import glob
import os
import shlex
import sys
import gyp
script_dir = os.path.dirname(__file__)
root = os.path.normpath(script_dir)
sys.path.insert(0, os.path.join(root, 'tools/'))


import config_builder

# Directory within which we want all generated files (including Makefiles)
# to be written.
output_dir = os.path.join(os.path.abspath(root), 'out')

def run_gyp(args):
  builder = config_builder.ConfigBuilder([
      "unordered_map",
      "tr1/unordered_map",
      "boost/unordered_map.hpp",
      'thread',
      'tr1/thread',
      'boost/thread.hpp',
      'tuple',
      'tr1/tuple',
      'boost/tuple',
      'atomic',
      'tr1/atomic'
      ], './')
  builder.Build()
  rc = gyp.main(args)
  if rc != 0:
    print 'Error running GYP'
    sys.exit(rc)

if __name__ == '__main__':
  args = sys.argv[1:]

  # GYP bug.
  # On msvs it will crash if it gets an absolute path.
  # On Mac/make it will crash if it doesn't get an absolute path.
  if sys.platform == 'win32':
    args.append(os.path.join(root, 'os.gyp'))
    common_fn  = os.path.join(root, 'common.gypi')
  else:
    args.append(os.path.join(os.path.abspath(root), 'os.gyp'))
    common_fn  = os.path.join(os.path.abspath(root), 'common.gypi')

  if os.path.exists(common_fn):
    args.extend(['-I', common_fn])

  args.append('--depth=' + root)
  
  additional_include = os.getenv("INCLUDE")
  if  additional_include :
    args.append('-Dadditional_include=' + additional_include)
  else :
    additional_include = ""

  # There's a bug with windows which doesn't allow this feature.
  if sys.platform != 'win32':
    # Tell gyp to write the Makefiles into output_dir
    args.extend(['--generator-output', output_dir])
    # Tell make to write its output into the same dir
    args.extend(['-Goutput_dir=' + output_dir])
    # Create Makefiles, not XCode projects
    args.extend('-f make'.split())
  else :
    os.system("vcvarsall.bat")

  args.append('-Dtarget_arch=ia32')
  args.append('-Dcomponent=static_library')
  args.append('-Dlibrary=static_library')
  gyp_args = list(args)
  print gyp_args
  run_gyp(gyp_args)

